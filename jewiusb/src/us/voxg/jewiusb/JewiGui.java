/*
 * Copyright (C) 2016 Greg Lyons <greglyons50+github@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package us.voxg.jewiusb;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Receiver;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.SysexMessage;
import javax.sound.midi.Transmitter;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;

/**
 *
 * @author Greg Lyons <greglyons50+github@gmail.com>
 */
public class JewiGui extends javax.swing.JFrame {

    /**
     * Creates new form JewiGui
     */
    public JewiGui() {
        this.midiOutGroup = new ButtonGroup();
        this.midiInGroup = new ButtonGroup();
        conf = new Config();
        initComponents();
        updateGuiFromConfig();
        updateMidiDevices();
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        setIconImage(new ImageIcon(getClass().getResource("/resources/ewi-usb-config.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        status = new javax.swing.JLabel();
        tab_pane = new javax.swing.JTabbedPane();
        setup_tab = new javax.swing.JPanel();
        lbl_breath_gain = new javax.swing.JLabel();
        lbl_bite_gain = new javax.swing.JLabel();
        lbl_bite_ac_gain = new javax.swing.JLabel();
        lbl_pitch_bend_gain = new javax.swing.JLabel();
        lbl_key_delay = new javax.swing.JLabel();
        breath_gain_slider = new javax.swing.JSlider();
        bite_gain_slider = new javax.swing.JSlider();
        bite_ac_gain_slider = new javax.swing.JSlider();
        pitch_bend_gain_slider = new javax.swing.JSlider();
        key_delay_slider = new javax.swing.JSlider();
        performance_tab = new javax.swing.JPanel();
        lbl_midi_channel = new javax.swing.JLabel();
        lbl_fingering = new javax.swing.JLabel();
        lbl_transpose = new javax.swing.JLabel();
        lbl_velocity = new javax.swing.JLabel();
        midi_channel_combo = new javax.swing.JComboBox<>();
        fingering_combo = new javax.swing.JComboBox<>();
        transpose_combo = new javax.swing.JComboBox<>();
        velocity_combo = new javax.swing.JComboBox<>();
        controller_tab = new javax.swing.JPanel();
        lbl_breath_cc1 = new javax.swing.JLabel();
        lbl_breath_cc2 = new javax.swing.JLabel();
        lbl_bite_cc1 = new javax.swing.JLabel();
        lbl_bite_cc2 = new javax.swing.JLabel();
        lbl_pitch_bend_up = new javax.swing.JLabel();
        lbl_pitch_bend_down = new javax.swing.JLabel();
        breath_cc1_combo = new javax.swing.JComboBox<>();
        breath_cc2_combo = new javax.swing.JComboBox<>();
        bite_cc1_combo = new javax.swing.JComboBox<>();
        bite_cc2_combo = new javax.swing.JComboBox<>();
        pitch_bend_up_combo = new javax.swing.JComboBox<>();
        pitch_bend_down_combo = new javax.swing.JComboBox<>();
        menubar = new javax.swing.JMenuBar();
        file_menu = new javax.swing.JMenu();
        file_open_item = new javax.swing.JMenuItem();
        file_save_item = new javax.swing.JMenuItem();
        file_separator = new javax.swing.JPopupMenu.Separator();
        file_exit = new javax.swing.JMenuItem();
        midi_menu = new javax.swing.JMenu();
        midi_in_menu = new javax.swing.JMenu();
        midi_out_menu = new javax.swing.JMenu();
        midi_send_item = new javax.swing.JMenuItem();
        midi_receive_item = new javax.swing.JMenuItem();
        midi_separator = new javax.swing.JPopupMenu.Separator();
        midi_refresh_item = new javax.swing.JMenuItem();
        help_menu = new javax.swing.JMenu();
        help_online = new javax.swing.JMenuItem();
        help_about_item = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EWI-USB Configuration Tool");

        status.setText("Status messages...");

        setup_tab.setMinimumSize(new java.awt.Dimension(400, 225));

        lbl_breath_gain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_breath_gain.setText("Breath Gain");

        lbl_bite_gain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_bite_gain.setText("Bite Gain");

        lbl_bite_ac_gain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_bite_ac_gain.setText("Bite AC Gain");

        lbl_pitch_bend_gain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_pitch_bend_gain.setText("Pitch Bend Gain");

        lbl_key_delay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_key_delay.setText("Key Delay");

        breath_gain_slider.setMaximum(127);
        breath_gain_slider.setValue(64);
        breath_gain_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                breath_gain_sliderStateChanged(evt);
            }
        });

        bite_gain_slider.setMaximum(127);
        bite_gain_slider.setValue(64);
        bite_gain_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bite_gain_sliderStateChanged(evt);
            }
        });

        bite_ac_gain_slider.setMaximum(127);
        bite_ac_gain_slider.setValue(64);
        bite_ac_gain_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bite_ac_gain_sliderStateChanged(evt);
            }
        });

        pitch_bend_gain_slider.setMaximum(127);
        pitch_bend_gain_slider.setValue(64);
        pitch_bend_gain_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pitch_bend_gain_sliderStateChanged(evt);
            }
        });

        key_delay_slider.setMaximum(15);
        key_delay_slider.setValue(8);
        key_delay_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                key_delay_sliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout setup_tabLayout = new javax.swing.GroupLayout(setup_tab);
        setup_tab.setLayout(setup_tabLayout);
        setup_tabLayout.setHorizontalGroup(
            setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setup_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbl_breath_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_bite_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_bite_ac_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_pitch_bend_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_key_delay, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pitch_bend_gain_slider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(bite_ac_gain_slider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bite_gain_slider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(key_delay_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(breath_gain_slider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        setup_tabLayout.setVerticalGroup(
            setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setup_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(breath_gain_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_breath_gain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_bite_gain)
                    .addComponent(bite_gain_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_bite_ac_gain)
                    .addComponent(bite_ac_gain_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_pitch_bend_gain)
                    .addComponent(pitch_bend_gain_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setup_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_key_delay)
                    .addComponent(key_delay_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        tab_pane.addTab("Setup", setup_tab);

        lbl_midi_channel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_midi_channel.setText("MIDI Channel");

        lbl_fingering.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fingering.setText("Fingering");

        lbl_transpose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_transpose.setText("Transpose");

        lbl_velocity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_velocity.setText("Velocity");

        midi_channel_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));
        midi_channel_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midi_channel_comboActionPerformed(evt);
            }
        });

        fingering_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - EWI", "1 - Saxophone", "2 - Flute", "3 - Oboe", "4 - EVI Valve 1", "5 - EVI Valve 2" }));
        fingering_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fingering_comboActionPerformed(evt);
            }
        });

        transpose_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F# 1", "G 1", "G# 1", "A 1", "A# 1", "B 1", "C 2", "C# 2", "D 2", "D# 2", "E 2", "F 2", "F# 2", "G 2", "G# 2", "A 2", "A# 2", "B 2", "C 3", "C# 3", "D 3", "D# 3", "E 3", "F 3", "F# 3", "G 3", "G# 3", "A 3", "A# 3", "B 3", "C 4", "C# 4", "D 4", "D# 4", "E 4", "F 4", "F# 4", "G 4", "G# 4", "A 4", "A# 4", "B 4", "C 5", "C# 5", "D 5", "D# 5", "E 5", "F 5", "F# 5", "G 5", "G# 5", "A 5", "A# 5", "B 5", "C 6", "C# 6", "D 6", "D# 6", "E 6", "F 6" }));
        transpose_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transpose_comboActionPerformed(evt);
            }
        });

        velocity_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 (Dynamic)", "1 (Fixed)", "2 (Fixed)", "3 (Fixed)", "4 (Fixed)", "5 (Fixed)", "6 (Fixed)", "7 (Fixed)", "8 (Fixed)", "9 (Fixed)", "10 (Fixed)", "11 (Fixed)", "12 (Fixed)", "13 (Fixed)", "14 (Fixed)", "15 (Fixed)", "16 (Fixed)", "17 (Fixed)", "18 (Fixed)", "19 (Fixed)", "20 (Fixed)", "21 (Fixed)", "22 (Fixed)", "23 (Fixed)", "24 (Fixed)", "25 (Fixed)", "26 (Fixed)", "27 (Fixed)", "28 (Fixed)", "29 (Fixed)", "30 (Fixed)", "31 (Fixed)", "32 (Fixed)", "33 (Fixed)", "34 (Fixed)", "35 (Fixed)", "36 (Fixed)", "37 (Fixed)", "38 (Fixed)", "39 (Fixed)", "40 (Fixed)", "41 (Fixed)", "42 (Fixed)", "43 (Fixed)", "44 (Fixed)", "45 (Fixed)", "46 (Fixed)", "47 (Fixed)", "48 (Fixed)", "49 (Fixed)", "50 (Fixed)", "51 (Fixed)", "52 (Fixed)", "53 (Fixed)", "54 (Fixed)", "55 (Fixed)", "56 (Fixed)", "57 (Fixed)", "58 (Fixed)", "59 (Fixed)", "60 (Fixed)", "61 (Fixed)", "62 (Fixed)", "63 (Fixed)", "64 (Fixed)", "65 (Fixed)", "66 (Fixed)", "67 (Fixed)", "68 (Fixed)", "69 (Fixed)", "70 (Fixed)", "71 (Fixed)", "72 (Fixed)", "73 (Fixed)", "74 (Fixed)", "75 (Fixed)", "76 (Fixed)", "77 (Fixed)", "78 (Fixed)", "79 (Fixed)", "80 (Fixed)", "81 (Fixed)", "82 (Fixed)", "83 (Fixed)", "84 (Fixed)", "85 (Fixed)", "86 (Fixed)", "87 (Fixed)", "88 (Fixed)", "89 (Fixed)", "90 (Fixed)", "91 (Fixed)", "92 (Fixed)", "93 (Fixed)", "94 (Fixed)", "95 (Fixed)", "96 (Fixed)", "97 (Fixed)", "98 (Fixed)", "99 (Fixed)", "100 (Fixed)", "101 (Fixed)", "102 (Fixed)", "103 (Fixed)", "104 (Fixed)", "105 (Fixed)", "106 (Fixed)", "107 (Fixed)", "108 (Fixed)", "109 (Fixed)", "110 (Fixed)", "111 (Fixed)", "112 (Fixed)", "113 (Fixed)", "114 (Fixed)", "115 (Fixed)", "116 (Fixed)", "117 (Fixed)", "118 (Fixed)", "119 (Fixed)", "120 (Fixed)", "121 (Fixed)", "122 (Fixed)", "123 (Fixed)", "124 (Fixed)", "125 (Fixed)", "126 (Fixed)", "127 (Fixed)" }));
        velocity_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                velocity_comboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout performance_tabLayout = new javax.swing.GroupLayout(performance_tab);
        performance_tab.setLayout(performance_tabLayout);
        performance_tabLayout.setHorizontalGroup(
            performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(performance_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_velocity)
                    .addComponent(lbl_midi_channel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_fingering)
                    .addComponent(lbl_transpose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(midi_channel_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fingering_combo, 0, 308, Short.MAX_VALUE)
                    .addComponent(transpose_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(velocity_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        performance_tabLayout.setVerticalGroup(
            performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(performance_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_midi_channel)
                    .addComponent(midi_channel_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fingering_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_fingering))
                .addGap(18, 18, 18)
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(transpose_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_transpose))
                .addGap(18, 18, 18)
                .addGroup(performance_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_velocity)
                    .addComponent(velocity_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        tab_pane.addTab("Performance", performance_tab);

        lbl_breath_cc1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_breath_cc1.setText("Breath CC 1");

        lbl_breath_cc2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_breath_cc2.setText("Breath CC 2");

        lbl_bite_cc1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_bite_cc1.setText("Bite CC 1");

        lbl_bite_cc2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_bite_cc2.setText("Bite CC 2");

        lbl_pitch_bend_up.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_pitch_bend_up.setText("Pitch Bend Up");

        lbl_pitch_bend_down.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_pitch_bend_down.setText("Pitch Bend Down");

        breath_cc1_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 (undefined EWI behavior)", "125 (undefined EWI behavior)", "126 (undefined EWI behavior)", "127 Aftertouch" }));
        breath_cc1_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breath_cc1_comboActionPerformed(evt);
            }
        });

        breath_cc2_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 (undefined EWI behavior)", "125 (undefined EWI behavior)", "126 (undefined EWI behavior)", "127 Aftertouch" }));
        breath_cc2_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breath_cc2_comboActionPerformed(evt);
            }
        });

        bite_cc1_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 Pitchbend up", "125 Pitchbend down", "126 Pitchbend up-down", "127 Pitchbend down-up" }));
        bite_cc1_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bite_cc1_comboActionPerformed(evt);
            }
        });

        bite_cc2_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 Pitchbend up", "125 Pitchbend down", "126 Pitchbend up-down", "127 Pitchbend down-up" }));
        bite_cc2_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bite_cc2_comboActionPerformed(evt);
            }
        });

        pitch_bend_up_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 (undefined EWI behavior)", "125 (undefined EWI behavior)", "126 (undefined EWI behavior)", "127 Pitch bend up" }));
        pitch_bend_up_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pitch_bend_up_comboActionPerformed(evt);
            }
        });

        pitch_bend_down_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 Off", "1 Modulation Wheel or Lever", "2 Breath Controller", "3 ", "4 Foot Controller", "5 Portamento Time", "6 Data Entry MSB", "7 Channel Volume", "8 Balance", "9 ", "10 Pan", "11 Expression Controller", "12 Effect Control 1", "13 Effect Control 2", "14 ", "15 ", "16 General Purpose Controller 1", "17 General Purpose Controller 2", "18 General Purpose Controller 3", "19 General Purpose Controller 4", "20 ", "21 ", "22 ", "23 ", "24 ", "25 ", "26 ", "27 ", "28 ", "29 ", "30 ", "31 ", "32 LSB for Control 0 (Bank Select)", "33 LSB for Control 1 (Modulation Wheel or Lever)", "34 LSB for Control 2 (Breath Controller)", "35 ", "36 LSB for Control 4 (Foot Controller)", "37 LSB for Control 5 (Portamento Time)", "38 LSB for Control 6 (Data Entry)", "39 LSB for Control 7 (Channel Volume)", "40 LSB for Control 8 (Balance)", "41 ", "42 LSB for Control 10 (Pan)", "43 LSB for Control 11 (Expression Controller)", "44 LSB for Control 12 (Effect control 1)", "45 LSB for Control 13 (Effect control 2)", "46 ", "47 ", "48 LSB for Control 16 (General Purpose Controller 1)", "49 LSB for Control 17 (General Purpose Controller 2)", "50 LSB for Control 18 (General Purpose Controller 3)", "51 LSB for Control 19 (General Purpose Controller 4)", "52 ", "53 ", "54 ", "55 ", "56 ", "57 ", "58 ", "59 ", "60 ", "61 ", "62 ", "63 ", "64 Damper Pedal on/off (Sustain)", "65 Portamento On/Off", "66 Sostenuto On/Off", "67 Soft Pedal On/Off", "68 Legato Footswitch", "69 Hold 2", "70 Sound Controller 1 (default: Sound Variation)", "71 Sound Controller 2 (default: Timbre/Harmonic Intens.)", "72 Sound Controller 3 (default: Release Time)", "73 Sound Controller 4 (default: Attack Time)", "74 Sound Controller 5 (default: Brightness)", "75 Sound Controller 6 (default: Decay Time - see MMA RP-021)", "76 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)", "77 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)", "78 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)", "79 Sound Controller 10 (default undefined - see MMA RP-021)", "80 General Purpose Controller 5", "81 General Purpose Controller 6", "82 General Purpose Controller 7", "83 General Purpose Controller 8", "84 Portamento Control", "85 ", "86 ", "87 ", "88 ", "89 ", "90 ", "91 Effects 1 Depth (default: Reverb Send Level - see MMA RP-023)", "92 Effects 2 Depth", "93 Effects 3 Depth (default: Chorus Send Level - see MMA RP-023)", "94 Effects 4 Depth", "95 Effects 5 Depth", "96 Data Increment (Data Entry +1) (see MMA RP-018)", "97 Data Decrement (Data Entry -1) (see MMA RP-018)", "98 Non-Registered Parameter Number (NRPN) - LSB", "99 Non-Registered Parameter Number (NRPN) - MSB", "100 Registered Parameter Number (RPN) - LSB*", "101 Registered Parameter Number (RPN) - MSB*", "102 ", "103 ", "104 ", "105 ", "106 ", "107 ", "108 ", "109 ", "110 ", "111 ", "112 ", "113 ", "114 ", "115 ", "116 ", "117 ", "118 ", "119 ", "120 (undefined EWI behavior)", "121 (undefined EWI behavior)", "122 (undefined EWI behavior)", "123 (undefined EWI behavior)", "124 (undefined EWI behavior)", "125 (undefined EWI behavior)", "126 (undefined EWI behavior)", "127 Pitch bend down" }));
        pitch_bend_down_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pitch_bend_down_comboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controller_tabLayout = new javax.swing.GroupLayout(controller_tab);
        controller_tab.setLayout(controller_tabLayout);
        controller_tabLayout.setHorizontalGroup(
            controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controller_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_pitch_bend_down, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(lbl_pitch_bend_up, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_bite_cc2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_bite_cc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_breath_cc2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_breath_cc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(breath_cc1_combo, 0, 298, Short.MAX_VALUE)
                    .addComponent(breath_cc2_combo, 0, 0, Short.MAX_VALUE)
                    .addComponent(bite_cc1_combo, 0, 0, Short.MAX_VALUE)
                    .addComponent(bite_cc2_combo, 0, 0, Short.MAX_VALUE)
                    .addComponent(pitch_bend_up_combo, 0, 0, Short.MAX_VALUE)
                    .addComponent(pitch_bend_down_combo, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        controller_tabLayout.setVerticalGroup(
            controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controller_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_breath_cc1)
                    .addComponent(breath_cc1_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_breath_cc2)
                    .addComponent(breath_cc2_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_bite_cc1)
                    .addComponent(bite_cc1_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_bite_cc2)
                    .addComponent(bite_cc2_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_pitch_bend_up, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pitch_bend_up_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controller_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbl_pitch_bend_down)
                    .addComponent(pitch_bend_down_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        tab_pane.addTab("Controller", controller_tab);

        file_menu.setText("File");
        file_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_menuActionPerformed(evt);
            }
        });

        file_open_item.setText("Open Sysex File...");
        file_open_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_open_itemActionPerformed(evt);
            }
        });
        file_menu.add(file_open_item);

        file_save_item.setText("Save Sysex File...");
        file_save_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_save_itemActionPerformed(evt);
            }
        });
        file_menu.add(file_save_item);
        file_menu.add(file_separator);

        file_exit.setText("Exit");
        file_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_exitActionPerformed(evt);
            }
        });
        file_menu.add(file_exit);

        menubar.add(file_menu);

        midi_menu.setText("MIDI");
        midi_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midi_menuActionPerformed(evt);
            }
        });

        midi_in_menu.setText("MIDI Input Device");
        midi_menu.add(midi_in_menu);

        midi_out_menu.setText("MIDI output Device");
        midi_menu.add(midi_out_menu);

        midi_send_item.setText("Send Config to EWI");
        midi_send_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midi_send_itemActionPerformed(evt);
            }
        });
        midi_menu.add(midi_send_item);

        midi_receive_item.setText("Receive Config From EWI");
        midi_receive_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midi_receive_itemActionPerformed(evt);
            }
        });
        midi_menu.add(midi_receive_item);
        midi_menu.add(midi_separator);

        midi_refresh_item.setText("Refresh MIDI Device List");
        midi_refresh_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midi_refresh_itemActionPerformed(evt);
            }
        });
        midi_menu.add(midi_refresh_item);

        menubar.add(midi_menu);

        help_menu.setText("Help");

        help_online.setText("Online Manual");
        help_online.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_onlineActionPerformed(evt);
            }
        });
        help_menu.add(help_online);

        help_about_item.setText("About...");
        help_about_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_about_itemActionPerformed(evt);
            }
        });
        help_menu.add(help_about_item);

        menubar.add(help_menu);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab_pane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tab_pane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void file_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_exitActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_file_exitActionPerformed

    private void file_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_menuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file_menuActionPerformed

    private void breath_gain_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_breath_gain_sliderStateChanged
        conf.setBreathGain(breath_gain_slider.getValue());
    }//GEN-LAST:event_breath_gain_sliderStateChanged

    private void bite_gain_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bite_gain_sliderStateChanged
        conf.setBiteGain(bite_gain_slider.getValue());
    }//GEN-LAST:event_bite_gain_sliderStateChanged

    private void bite_ac_gain_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bite_ac_gain_sliderStateChanged
        conf.setBiteAcGain(bite_ac_gain_slider.getValue());
    }//GEN-LAST:event_bite_ac_gain_sliderStateChanged

    private void pitch_bend_gain_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pitch_bend_gain_sliderStateChanged
        conf.setPitchBendGain(pitch_bend_gain_slider.getValue());
    }//GEN-LAST:event_pitch_bend_gain_sliderStateChanged

    private void key_delay_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_key_delay_sliderStateChanged
        conf.setKeyDelay(key_delay_slider.getValue());
    }//GEN-LAST:event_key_delay_sliderStateChanged

    private void midi_channel_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midi_channel_comboActionPerformed
        conf.setMidiChannel(midi_channel_combo.getSelectedIndex());
    }//GEN-LAST:event_midi_channel_comboActionPerformed

    private void fingering_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fingering_comboActionPerformed
        conf.setFingering(fingering_combo.getSelectedIndex());
    }//GEN-LAST:event_fingering_comboActionPerformed

    private void transpose_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transpose_comboActionPerformed
        conf.setTranspose(transpose_combo.getSelectedIndex() + 0x22);
    }//GEN-LAST:event_transpose_comboActionPerformed

    private void velocity_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_velocity_comboActionPerformed
        conf.setVelocity(velocity_combo.getSelectedIndex());
    }//GEN-LAST:event_velocity_comboActionPerformed

    private void breath_cc1_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breath_cc1_comboActionPerformed
        int value = breath_cc1_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7f) {
            value = 0;
            breath_cc1_combo.setSelectedIndex(0);
        }
        conf.setBreathCC1(value);
    }//GEN-LAST:event_breath_cc1_comboActionPerformed

    private void breath_cc2_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breath_cc2_comboActionPerformed
        int value = breath_cc2_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7f) {
            value = 0;
            breath_cc2_combo.setSelectedIndex(0);
        }
        conf.setBreathCC2(value);
    }//GEN-LAST:event_breath_cc2_comboActionPerformed

    private void bite_cc1_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bite_cc1_comboActionPerformed
        int value = bite_cc1_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7C) {
            value = 0;
            bite_cc1_combo.setSelectedIndex(0);
        }
        conf.setBiteCC1(value);
    }//GEN-LAST:event_bite_cc1_comboActionPerformed

    private void bite_cc2_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bite_cc2_comboActionPerformed
        int value = bite_cc2_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7C) {
            value = 0;
            bite_cc2_combo.setSelectedIndex(0);
        }
        conf.setBiteCC2(value);
    }//GEN-LAST:event_bite_cc2_comboActionPerformed

    private void pitch_bend_up_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pitch_bend_up_comboActionPerformed
        int value = pitch_bend_up_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7f) {
            value = 0;
            pitch_bend_up_combo.setSelectedIndex(0);
        }
        conf.setPitchBendUp(value);
    }//GEN-LAST:event_pitch_bend_up_comboActionPerformed

    private void pitch_bend_down_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pitch_bend_down_comboActionPerformed
        int value = pitch_bend_down_combo.getSelectedIndex();
        if (value > 0x77 && value < 0x7f) {
            value = 0;
            pitch_bend_down_combo.setSelectedIndex(0);
        }
        conf.setPitchBendDown(value);
    }//GEN-LAST:event_pitch_bend_down_comboActionPerformed

    private void midi_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midi_menuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_midi_menuActionPerformed

    private void midi_refresh_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midi_refresh_itemActionPerformed
        updateMidiDevices();
    }//GEN-LAST:event_midi_refresh_itemActionPerformed

    private void file_open_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_open_itemActionPerformed
        openSysex();
    }//GEN-LAST:event_file_open_itemActionPerformed

    private void file_save_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_save_itemActionPerformed
        writeSysex();
    }//GEN-LAST:event_file_save_itemActionPerformed

    private void help_onlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_onlineActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("http://www.voxg.us/projects/akai-ewi-usb/help"));
            } catch (IOException | URISyntaxException ex) {
                status.setText("Couldn't launch Online Help URL: http://www.voxg.us/projects/akai-ewi-usb/help");
                status.setToolTipText(ex.toString());
            }
        } else {
            status.setText("Couldn't launch Online Help URL: http://www.voxg.us/projects/akai-ewi-usb/help");
            status.setToolTipText("");            
        }
    }//GEN-LAST:event_help_onlineActionPerformed

    private void help_about_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_about_itemActionPerformed
        JOptionPane.showMessageDialog(this,
                "<html>This free software is provided with no warranty.<br/>"+
                "Use at your own risk. For questions or suggestions, you<br/>"+
                "may try to contact greglyons50+github@gmail.com</html>",
                "About EWI USB Configuration Tool",
                JOptionPane.INFORMATION_MESSAGE,
                new ImageIcon(getClass().getResource("/resources/ewi-usb-config.png")));
    }//GEN-LAST:event_help_about_itemActionPerformed

    private void midi_receive_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midi_receive_itemActionPerformed
        loadSettingsFromEwi();
        updateGuiFromConfig();
    }//GEN-LAST:event_midi_receive_itemActionPerformed

    private void midi_send_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midi_send_itemActionPerformed
        this.saveSettingsToEwi();
    }//GEN-LAST:event_midi_send_itemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JewiGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JewiGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JewiGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JewiGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JewiGui().setVisible(true);
            }
        });
    }
    
    private void updateGuiFromConfig() {
        // Setup tab
        breath_gain_slider.setValue(conf.getBreathGain());
        bite_gain_slider.setValue(conf.getBiteGain());
        bite_ac_gain_slider.setValue(conf.getBiteAcGain());
        pitch_bend_gain_slider.setValue(conf.getPitchBendGain());
        key_delay_slider.setValue(conf.getKeyDelay());
        // Performance tab
        midi_channel_combo.setSelectedIndex(conf.getMidiChannel());
        fingering_combo.setSelectedIndex(conf.getFingering());
        transpose_combo.setSelectedIndex(conf.getTranspose() - 0x22);
        velocity_combo.setSelectedIndex(conf.getVelocity());
        // Controller tab
        breath_cc1_combo.setSelectedIndex(conf.getBreathCC1());
        breath_cc2_combo.setSelectedIndex(conf.getBreathCC2());
        bite_cc1_combo.setSelectedIndex(conf.getBiteCC1());
        bite_cc2_combo.setSelectedIndex(conf.getBiteCC2());
        pitch_bend_up_combo.setSelectedIndex(conf.getPitchBendUp());
        pitch_bend_down_combo.setSelectedIndex(conf.getPitchBendDown());
    }
    
    private void updateMidiDevices() {
        Enumeration e = midiInGroup.getElements();
        while (e.hasMoreElements()) {
            midiInGroup.remove((AbstractButton)e.nextElement());
        }
        midi_in_menu.removeAll();
        e = midiOutGroup.getElements();
        while (e.hasMoreElements()) {
            midiOutGroup.remove((AbstractButton)e.nextElement());
        }
        midi_out_menu.removeAll();
        try {
            infos = MidiSystem.getMidiDeviceInfo();
            midi_ins = new int[infos.length];
            midi_outs = new int[infos.length];
            int in_counter = 0, out_counter = 0, infos_counter = 0;
            for (MidiDevice.Info i : infos) {
                MidiDevice d = MidiSystem.getMidiDevice(i);
                if (d.getMaxTransmitters() != 0) {
                    midi_ins[in_counter++] = infos_counter;
                    JRadioButtonMenuItem mi = new JRadioButtonMenuItem(i.getName());
                    midiInGroup.add(mi);
                    midi_in_menu.add(mi);
                    if (i.getName().contains("EWI")) {
                        midiInGroup.setSelected(mi.getModel(), true);
                    }
                }
                if (d.getMaxReceivers() != 0) {
                    midi_outs[out_counter++] = infos_counter;
                    JRadioButtonMenuItem mi = new JRadioButtonMenuItem(i.getName());
                    midiOutGroup.add(mi);
                    midi_out_menu.add(mi);
                    if (i.getName().contains("EWI")) {
                        midiOutGroup.setSelected(mi.getModel(), true);
                    }
                }
                infos_counter++;
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
        status.setText("MIDI devices refreshed. Choices have been reset");
        status.setToolTipText("");
    }

    private void openSysex() {
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selected = fileChooser.getSelectedFile();
            try {
                conf.loadSysexFile(selected);
                updateGuiFromConfig();
                status.setText("File loaded: " + selected.getPath());
                status.setToolTipText("");
            } catch (IOException | InvalidMidiDataException e) {
                status.setText("Error reading file " + selected.getPath());
                status.setToolTipText(e.toString());
            }
        }
    }
    
    private int getGroupSelectedIndex(ButtonGroup group) {
        int counter = 0;
        Enumeration e = group.getElements();
        ButtonModel selectedItem = group.getSelection();
        while (e.hasMoreElements()) {
            AbstractButton b = (AbstractButton)e.nextElement();
            if (b.getModel().equals(selectedItem)) {
                return counter;
            }
            counter++;
        }
        return -1;
    }
    
    private void setStatus(String mainText, String toolTipText) {
        status.setText(mainText);
        status.setToolTipText(toolTipText);
    }
    
    private void notifyError(String text) {
        JOptionPane.showMessageDialog(this, text, "ERROR",
                JOptionPane.ERROR_MESSAGE);
    }
    
    private void notifySuccess(String text) {
        JOptionPane.showMessageDialog(this, text, "Operation Succeeded",
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void loadSettingsFromEwi() {
        String stage = "Requesting configuration from EWI...please wait a moment";
        setStatus(stage, "working");
        ShortMessage nrpn1, nrpn2, sysexMode, normalMode;
        SysexMessage[] requests;
        try {
            stage = "Bug in the MIDI message code";
            nrpn1 = new ShortMessage(0xB0, 0x63, 0x01);
            nrpn2 = new ShortMessage(0xB0, 0x62, 0x04);
            sysexMode = new ShortMessage(0xB0, 0x06, 0x20);
            normalMode = new ShortMessage(0xB0, 0x06, 0x10);
            requests = new SysexMessage[] {
                new SysexMessage(new byte[] { (byte)0xF0, (byte)0x47, (byte)0x7f, (byte)0x6d, (byte)0x42, (byte)0, (byte)0, (byte)0xf7 }, 8),
                new SysexMessage(new byte[] { (byte)0xF0, (byte)0x47, (byte)0x7f, (byte)0x6d, (byte)0x40, (byte)0, (byte)0, (byte)0xf7 }, 8)
            };
        } catch (InvalidMidiDataException e) {
            setStatus(stage, e.toString());
            return;
        }
        int midiIn = getGroupSelectedIndex(midiInGroup);
        int midiOut = getGroupSelectedIndex(midiOutGroup);
        if (midiIn < 0 || midiOut < 0) {
            setStatus("MIDI IN and OUT devices must be selected", "");
            notifyError(
                    "<html>Configuration not loaded.</br>"
                    + "Both MIDI IN and MIDI OUT devices must be selected</br>"
                    + "in the MIDI menu before attempting to load.</html>"
            );
            return;
        }
        try (
                MidiDevice input = MidiSystem.getMidiDevice(infos[midi_ins[midiIn]]);
                MidiDevice output = MidiSystem.getMidiDevice(infos[midi_outs[midiOut]])
        ) {
            stage = "Could not open MIDI devices";
            input.open();
            stage = "Could not open MIDI OUT device";
            output.open();
            Transmitter midi_in = input.getTransmitter();
            UtilityReceiver ur = new UtilityReceiver(conf);
            midi_in.setReceiver(ur);
            Receiver midi_out = output.getReceiver();
            for (SysexMessage request : requests) {
                stage = "Error initializing sysex mode on the EWI";
                midi_out.send(nrpn1, -1);
                midi_out.send(nrpn2, -1);
                midi_out.send(sysexMode, -1);
                midi_out.send(request, -1);
                stage = "Error reading sysex response from EWI";
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    // ignore
                }
            }
            midi_out.send(nrpn1, -1);
            midi_out.send(nrpn2, -1);
            midi_out.send(normalMode, -1);
            int processed = ur.getMessagesProcessed();
            setStatus("Messages processed: " + processed, "");
            notifySuccess("<html>Configuration loaded from MIDI <br/>" +
                    processed + " of 2 expected messages received from EWI.");
        } catch (MidiUnavailableException ex) {
            setStatus(stage, ex.toString());
        }
    }
    
    private void saveSettingsToEwi() {
        String stage = "Sending configuration EWI...please wait";
        setStatus(stage, "working...");
        ShortMessage nrpn1, nrpn2, sysexMode, normalMode;
        try {
            stage = "Bug in the MIDI message code";
            nrpn1 = new ShortMessage(0xB0, 0x63, 0x01);
            nrpn2 = new ShortMessage(0xB0, 0x62, 0x04);
            sysexMode = new ShortMessage(0xB0, 0x06, 0x20);
            normalMode = new ShortMessage(0xB0, 0x06, 0x10);
        } catch (InvalidMidiDataException e) {
            setStatus(stage, e.toString());
            return;
        }
        SysexMessage[] messages = conf.toSysex();
        int midiOut = getGroupSelectedIndex(midiOutGroup);
        if (midiOut < 0) {
            setStatus("MIDI OUT devices must be selected", "");
            notifyError(
                    "<html>Configuration not loaded.</br>"
                    + "The MIDI OUT device must be selected in the MIDI</br>"
                    + "menu before attempting to configure the EWI.</html>"
            );
            return;
        }
        try (MidiDevice output = MidiSystem.getMidiDevice(infos[midi_outs[midiOut]])) {
            stage = "Error opening MIDI output device";
            output.open();
            Receiver midi_out = output.getReceiver();
            stage = "Error sending MIDI messages to the EWI";
            for (SysexMessage message : messages) {
                midi_out.send(nrpn1, -1);
                midi_out.send(nrpn2, -1);
                midi_out.send(sysexMode, -1);
                midi_out.send(message, -1);
            }
            midi_out.send(nrpn1, -1);
            midi_out.send(nrpn2, -1);
            midi_out.send(normalMode, -1);
            setStatus("Configuration sent successfully to EWI", "");
        } catch (MidiUnavailableException ex) {
            setStatus(stage, ex.toString());
        }
        notifySuccess("Successfully configured EWI device.");
    }

    
    private void writeSysex() {
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selected = fileChooser.getSelectedFile();
            try {
                //updateConfigFromGui();
                conf.saveSysexFile(selected);
                status.setText("File saved: " + selected.getPath());
                status.setToolTipText("");
            } catch (Exception e) {
                status.setText("Error writing file " + selected.getPath());
                status.setToolTipText(e.toString());
            }
        }
    }
    
    private final Config conf;
    private MidiDevice.Info[] infos = null;
    private int[] midi_ins = null;
    private int[] midi_outs = null;
    private final ButtonGroup midiInGroup;
    private final ButtonGroup midiOutGroup;
    private final JFileChooser fileChooser;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider bite_ac_gain_slider;
    private javax.swing.JComboBox<String> bite_cc1_combo;
    private javax.swing.JComboBox<String> bite_cc2_combo;
    private javax.swing.JSlider bite_gain_slider;
    private javax.swing.JComboBox<String> breath_cc1_combo;
    private javax.swing.JComboBox<String> breath_cc2_combo;
    private javax.swing.JSlider breath_gain_slider;
    private javax.swing.JPanel controller_tab;
    private javax.swing.JMenuItem file_exit;
    private javax.swing.JMenu file_menu;
    private javax.swing.JMenuItem file_open_item;
    private javax.swing.JMenuItem file_save_item;
    private javax.swing.JPopupMenu.Separator file_separator;
    private javax.swing.JComboBox<String> fingering_combo;
    private javax.swing.JMenuItem help_about_item;
    private javax.swing.JMenu help_menu;
    private javax.swing.JMenuItem help_online;
    private javax.swing.JSlider key_delay_slider;
    private javax.swing.JLabel lbl_bite_ac_gain;
    private javax.swing.JLabel lbl_bite_cc1;
    private javax.swing.JLabel lbl_bite_cc2;
    private javax.swing.JLabel lbl_bite_gain;
    private javax.swing.JLabel lbl_breath_cc1;
    private javax.swing.JLabel lbl_breath_cc2;
    private javax.swing.JLabel lbl_breath_gain;
    private javax.swing.JLabel lbl_fingering;
    private javax.swing.JLabel lbl_key_delay;
    private javax.swing.JLabel lbl_midi_channel;
    private javax.swing.JLabel lbl_pitch_bend_down;
    private javax.swing.JLabel lbl_pitch_bend_gain;
    private javax.swing.JLabel lbl_pitch_bend_up;
    private javax.swing.JLabel lbl_transpose;
    private javax.swing.JLabel lbl_velocity;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JComboBox<String> midi_channel_combo;
    private javax.swing.JMenu midi_in_menu;
    private javax.swing.JMenu midi_menu;
    private javax.swing.JMenu midi_out_menu;
    private javax.swing.JMenuItem midi_receive_item;
    private javax.swing.JMenuItem midi_refresh_item;
    private javax.swing.JMenuItem midi_send_item;
    private javax.swing.JPopupMenu.Separator midi_separator;
    private javax.swing.JPanel performance_tab;
    private javax.swing.JComboBox<String> pitch_bend_down_combo;
    private javax.swing.JSlider pitch_bend_gain_slider;
    private javax.swing.JComboBox<String> pitch_bend_up_combo;
    private javax.swing.JPanel setup_tab;
    private javax.swing.JLabel status;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JComboBox<String> transpose_combo;
    private javax.swing.JComboBox<String> velocity_combo;
    // End of variables declaration//GEN-END:variables
}
